services:
  backend:
    build: 
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DEBUG=True
      - DJANGO_SECRET_KEY=django-insecure-zn2ff1cb_ih9+(y658)!ax@b2^4$xo0i2vu6qb)t17hjcv)=bp
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/lactation_db
      - PGDATABASE=lactation_db
      - PGUSER=postgres
      - PGPASSWORD=postgres
      - PGHOST=db
      - PGPORT=5432
      - CORS_ALLOWED_ORIGINS=http://localhost:3000
      - CORS_ALLOW_ALL_ORIGINS=True
      - CORS_ALLOWS_CREDENTIALS=True
      - CHANNEL_LAYERS_BACKEND=channels.layers.InMemoryChannelLayer
      - BACKEND_URL=http://localhost:8000
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "python manage.py migrate &&
             gunicorn backend.wsgi:application --bind 0.0.0.0:8000"

  frontend:
    build:
      dockerfile: frontend/Dockerfile
      args:
        - RAILWAY_ENVIRONMENT=dev
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - backend
    restart: unless-stopped


  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=lactation_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data: